@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

LAYOUT_LANDSCAPE()
TITLE Customer Profile Center - Container

AddRelTag("async", $lineStyle= DashedLine())

Person(customer, "Cliente", "Consumidor final que foi cadastrado no sistema")

Boundary(internalProducersBoundary, "Sistemas internos") {
    Container(marketingPlatform, "Plataforma de Marketing", "Vue.js", "Plataforma responsável por capanhas de marketing e landing pages")
    Container(pdvPlatforma, "PDV", "Windows Forms C#", "Plataforma de manipulação de vendas nas lojas físicas")
    Container(ecomerPlatform, "E-Comerce", "Vue.js", "Plataforma de e-comerce")
}

ContainerQueue(rabbitCustomerReport, "Serviço de Mensageria", "RabbitMQ", "Pedido de criação de um cliente")

Boundary(customerProfileCenterBoundary, "Customer Profile Center") {
    Container(customerProfileCenter, "Customer Profile Center","ASP NET 7", "Centraliza a jornada e os dados do consumidor")
    ContainerDb(customerProfileDb, "Customer Profile Database", "MongoDB", "Armazena os dados dos consumidores")

    Container(reportSystem, "Report System","ASP NET 7", "Centraliza os dados dos clientes para relatórios")
    ContainerDb(reportingDb, "Reporting Database", "SQL Server", "Armazena dados para geração de relatórios avançados")
    ContainerQueue(rabbitMqReport, "Serviço de Mensageria", "RabbitMQ", "Dados de criação de um cliente")

    Container(notificationCenter, "Notification Center", "ASP NET 7",  "Responsável por notificações dos clientes")
    ContainerQueue(rabbitMqNotification, "Serviço de Mensageria", "RabbitMQ", "Dados de Notificação")
    System_Ext(emailService, "Sistema de Email", "Sitema de controle de template e envio de email")
    System_Ext(phoneService, "Sistema de envio \n SMS / Whatsapp", "Sitema de envio de notificações para celulares", "HTTP/JSON")

    System_Ext(viaCep, "ViaCEP", "Sistema Externo para obter informações sobre CEP")
    Container(cepService, "Cep Service", "Sistema para obter informações sobre CEP")
    ContainerDb(platformCache, "In-memory data store", "Redis", "Usado para armazenar os dados de forma temporária. Cache.")
}

'Relacionamento dos clientes
Rel(marketingPlatform, customerProfileCenter, "Cadastra Cliente", "")
Rel(pdvPlatforma, rabbitCustomerReport, "Envia Pedido de Cadastro De Cliente", "AMQP", $tags = "async")
Rel(ecomerPlatform, rabbitCustomerReport, "Envia Pedido de Cadastro De Cliente", "AMQP", $tags = "async")
Rel(rabbitCustomerReport, customerProfileCenter, "Envia Pedido de Cadastro De Cliente", "AMQP", $tags = "async")

'Relacionamentos com o Customer Profile
Rel(customerProfileCenter, customerProfileDb, "Armazena os dados no", "")
Rel(customerProfileCenter, cepService, "Busca Dados para preencher Endereço", "HTTP/JSON")
Rel(customerProfileCenter, rabbitMqReport, "Adiciona dados do Cliente criado no Topico", "AMQP", $tags = "async")

'Relacionamentos do reportSystem
Rel(reportSystem, reportingDb, "Armazena os dados no", "")
Rel(rabbitMqReport, reportSystem, "Envia dados do cliente para", "AMQP", $tags = "async")


'Relacionamentos do sistema de Cep
Rel(cepService, viaCep, "Busca dados no", "HTTP/JOSN")
Rel(cepService, platformCache, "Armazena e faz leitura de Cache No")

'Relacionamentos com os sistemas de notificação
Rel(customerProfileCenter, rabbitMqNotification, "Enfileira Notificação no", "AMQP", $tags = "async")
Rel(rabbitMqNotification, notificationCenter, "Envia Mensagem para", "AMQP", $tags = "async")
Rel(notificationCenter, emailService, "Envia Notificação usando", "HTTP/JSON")
Rel(notificationCenter, phoneService, "Envia Notificação usando", "HTTP/JSON")
Rel(emailService, customer, "Notifica Cliente", "")
Rel(phoneService, customer, "Notifica Cliente", "")

SHOW_LEGEND()
@enduml